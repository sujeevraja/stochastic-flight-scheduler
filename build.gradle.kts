/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.3.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    java

    // Apply the application plugin to add support for building an application
    application
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    implementation("com.typesafe.akka:akka-actor_2.12:2.5.22")
    implementation("org.apache.logging.log4j:log4j-api:2.11.2")
    implementation("org.apache.logging.log4j:log4j-core:2.11.2")
    implementation("org.apache.commons:commons-math3:3.0")
    implementation("commons-cli:commons-cli:1.4")
    implementation("org.yaml:snakeyaml:1.8")

    val cplexJarPath: String by project
    compile(files(cplexJarPath))

    // Use JUnit test framework
    testImplementation("junit:junit:4.12")
}

tasks {
    register<Jar>("uberJar") {
        // archiveClassifier.set("uber")
        // archiveAppendix.set("_uber")
        archiveFileName.set("stochastic_uber.jar")
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        manifest {
            attributes("Main-Class" to "stochastic.main.Main")
        }

        val sourcesMain = sourceSets.main.get()
        sourcesMain.allSource.forEach { println("add from sources: ${it.name}") }
        from(sourceSets.main.get().output)

        dependsOn(configurations.runtimeClasspath)
        from(configurations.runtimeClasspath.get()
                .onEach { println("add from dependencies: ${it.name}") }
                .map { if (it.isDirectory) it else zipTree(it) })
    }

    register<Delete>("cleanLogs") {
        delete(fileTree("logs") {
           include("*.csv", "*.lp", "*.log", "*.xml")
        })
        delete(fileTree("solution") {
            include("*.yaml", "*.csv")
        })
    }

    compileJava {
        options.compilerArgs.add("-Xlint:deprecation")
    }
}

application {
    // Define the main class for the application
    mainClassName = "stochastic.main.Main"

    val cplexLibPath : String by project
    applicationDefaultJvmArgs = listOf(
        "-Xms32m",
        "-Xmx4g",
        "-Djava.library.path=$cplexLibPath")
}

